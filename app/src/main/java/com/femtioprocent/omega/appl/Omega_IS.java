package com.femtioprocent.omega.appl;

import com.femtioprocent.omega.OmegaContext;
import com.femtioprocent.omega.OmegaVersion;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import javafx.embed.swing.JFXPanel;

import javax.swing.*;
import javax.swing.border.TitledBorder;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.IOException;

/**
 * Created by lars on 2016-12-10.
 */
public class Omega_IS extends JDialog {
    private JPanel contentPane;
    private JButton lessonEditorButton;
    private JButton settingsButton;
    private JButton animEditorButton;
    private JButton lessonRuntimeButton;
    private JCheckBox rememberSelectionCheckBox;
    private JPasswordField passwordField1;
    private JTextPane theInfoAndSomeTextPane;

    String[] args;
    private static Integer selection = null;


    public Omega_IS() {
        super((Frame) null, "Omega_IS");
        initFx();

        setTitle("Omega_IS - Selection");
        setContentPane(contentPane);
        setModal(true);
        getRootPane().setDefaultButton(settingsButton);

        lessonEditorButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                setVisible(false);
                selection = 1;
                if (rememberSelectionCheckBox.isSelected())
                    OmegaStartManager.savePref(selection);
            }
        });
        lessonRuntimeButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                setVisible(false);
                selection = 2;
                if (rememberSelectionCheckBox.isSelected())
                    OmegaStartManager.savePref(selection);
            }
        });
        animEditorButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                setVisible(false);
                selection = 3;
                if (rememberSelectionCheckBox.isSelected())
                    OmegaStartManager.savePref(selection);
            }
        });
        settingsButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                setVisible(false);
                selection = 4;
            }
        });

        String version = OmegaVersion.getVersionBlurb();
        theInfoAndSomeTextPane.setText(version);
        //pack();
    }

    public static void initFx() {
        SwingUtilities.invokeLater(() -> {
            new JFXPanel();
        });
    }

    public static void main(String[] argv) {

        try {
            OmegaContext.serr_log.getLogger().info("CWD: " + (new File(".")).getCanonicalPath());
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
        Integer selection = OmegaStartManager.fromAutoStart();
        if (selection == null)
            selection = OmegaStartManager.fromPU(argv, selection);

        switch (selection) {
            case 1:
                LessonEditorAppl.main(argv);
                break;
            case 2:
                LessonRuntimeAppl.main(argv);
                break;
            case 3:
                AnimEditorAppl.main(argv);
                break;
            case 4:
                Settings.main(argv);
                break;
        }
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        contentPane = new JPanel();
        contentPane.setLayout(new GridLayoutManager(2, 3, new Insets(0, 0, 0, 0), -1, -1));
        contentPane.setPreferredSize(new Dimension(820, 160));
        contentPane.setRequestFocusEnabled(false);
        contentPane.setBorder(BorderFactory.createTitledBorder(null, "Info & Starter", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(4, 1, new Insets(0, 0, 0, 0), -1, -1));
        contentPane.add(panel1, new GridConstraints(0, 2, 2, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, 1, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        lessonEditorButton = new JButton();
        lessonEditorButton.setText("Lesson Editor");
        panel1.add(lessonEditorButton, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        settingsButton = new JButton();
        settingsButton.setText("Settings");
        panel1.add(settingsButton, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        animEditorButton = new JButton();
        animEditorButton.setText("Anim Editor");
        panel1.add(animEditorButton, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        lessonRuntimeButton = new JButton();
        lessonRuntimeButton.setText("Lesson Runtime");
        panel1.add(lessonRuntimeButton, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        contentPane.add(panel2, new GridConstraints(1, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        passwordField1 = new JPasswordField();
        panel2.add(passwordField1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        final JPanel panel3 = new JPanel();
        panel3.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        panel2.add(panel3, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        theInfoAndSomeTextPane = new JTextPane();
        theInfoAndSomeTextPane.setText("Î©, version: 2.1.0; build: 23-07-01_22:27:02 mango.local  CWD: /Users/lars/project/omega/omega2_dev/github/Omega_IS-2/runtime Version: java 20.0.1,   javafx 20+19 Java Vendor: Homebrew; OS name: mac os x java home: /opt/homebrew/Cellar/openjdk/20.0.1/libexec/openjdk.jdk/Contents/Home");
        panel3.add(theInfoAndSomeTextPane, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(150, 50), null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return contentPane;
    }

    public Integer waitForSelection() {
        while (selection == null || selection == 0) {
            try {
                Thread.sleep(200);
            } catch (InterruptedException e) {
            }
        }
        return selection;
    }
}
