package com.femtioprocent.omega.appl;

import com.femtioprocent.omega.OmegaVersion;
import com.femtioprocent.omega.util.Log;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import javafx.embed.swing.JFXPanel;

import javax.swing.*;
import javax.swing.border.TitledBorder;
import java.awt.*;
import java.io.File;
import java.io.IOException;
import java.util.function.Consumer;

/**
 * Created by lars on 2016-12-10.
 */
public class Omega_IS extends JDialog {
    private static Integer selection = null;
    private JPanel contentPane;
    private JButton lessonEditorButton;
    private JButton settingsButton;
    private JButton animEditorButton;
    private JButton lessonRuntimeButton;
    private JPasswordField passwordField1;
    private JTextPane theInfoAndSomeTextPane;

    public Omega_IS() {
	super((Frame) null, "Omega_IS");
	initFx();

	setTitle("Omega_IS - Selection");
	setContentPane(contentPane);
	setModal(true);
	getRootPane().setDefaultButton(settingsButton);

	Consumer<Integer> callback = (Integer a) -> {
	    setVisible(false);
	    selection = a;
	};

	lessonEditorButton.addActionListener(e -> callback.accept(1));
	lessonRuntimeButton.addActionListener(e -> callback.accept(2));
	animEditorButton.addActionListener(e -> callback.accept(3));
	settingsButton.addActionListener(e -> callback.accept(4));

	String version = OmegaVersion.getVersionBlurb();
	theInfoAndSomeTextPane.setText(version);
	//pack();
    }

    public static void initFx() {
	SwingUtilities.invokeLater(JFXPanel::new);
    }

    public static void main(String[] argv) {

        for (String arg : argv) {
            if ( "-help".equals(arg) ) {
                helpAndExit();
            }
        }
	try {
	    Log.getLogger().info("CWD: " + (new File(".")).getCanonicalPath());
	} catch (IOException e) {
	    throw new RuntimeException(e);
	}

	int selection = askForIt();

	switch (selection) {
	    case 1 -> LessonEditorAppl.main(argv);
	    case 2 -> LessonRuntimeAppl.main(argv);
	    case 3 -> AnimEditorAppl.main(argv);
	    case 4 -> Settings.main(argv);
	}
    }

    static void helpAndExit() {
        System.err.println("Args:");
        System.err.println("-help                This help text");
        System.err.println("-log                 Turn on logging");
        System.err.println("-small               Shows a small window size");
        System.err.println("-smaller             Shows a smaller window size");
        System.err.println("-smallest            Shows a the smallest window size");
        System.err.println("-omega_lang=<lang>   Set omega lang");
        System.err.println("-v                   Set verbose mode");
        System.err.println("-T                   Set a config setting to true");
        System.err.println("-R                   Set run mode to true");
        System.err.println("-t=<value>           Set step time in milli seconds");
        System.err.println("-T=<value>           Set step time in milli seconds for lesson editor");
        System.err.println("-omega_assets=<dir>  Set location of omega assets");
        System.err.println("-few                 Put only a few items in cache");
        System.err.println("-demo                Demo mode");
        System.err.println("-ask                 Ask for a lesson file [lesson runtime]");
        System.err.println("-pupil               Set run mode to pupil (default) [lesson runtime]");
        System.err.println("-admin -teacher      Set run mode to admin/teacher [lesson runtime]");
        System.exit(0);
    }

    static int askForIt() {
	Omega_IS ss = new Omega_IS();
	ss.pack();
	ss.setVisible(true);
	return ss.waitForSelection();
    }

    public Integer waitForSelection() {
	return selection;
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
	$$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
	contentPane = new JPanel();
	contentPane.setLayout(new GridLayoutManager(2, 3, new Insets(0, 0, 0, 0), -1, -1));
	contentPane.setPreferredSize(new Dimension(820, 200));
	contentPane.setRequestFocusEnabled(false);
	contentPane.setBorder(BorderFactory.createTitledBorder(null, "Info & Starter", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
	final JPanel panel1 = new JPanel();
	panel1.setLayout(new GridLayoutManager(5, 1, new Insets(0, 0, 0, 0), -1, -1));
	contentPane.add(panel1, new GridConstraints(0, 2, 2, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, 1, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
	settingsButton = new JButton();
	settingsButton.setText("Settings");
	panel1.add(settingsButton, new GridConstraints(4, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
	lessonRuntimeButton = new JButton();
	lessonRuntimeButton.setText("Omega - Interactive Sentences");
	panel1.add(lessonRuntimeButton, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
	lessonEditorButton = new JButton();
	lessonEditorButton.setText("Lesson/Task Editor");
	panel1.add(lessonEditorButton, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
	final Spacer spacer1 = new Spacer();
	panel1.add(spacer1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
	animEditorButton = new JButton();
	animEditorButton.setText("Animation Editor");
	panel1.add(animEditorButton, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
	final JPanel panel2 = new JPanel();
	panel2.setLayout(new GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
	contentPane.add(panel2, new GridConstraints(1, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
	passwordField1 = new JPasswordField();
	panel2.add(passwordField1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
	final JPanel panel3 = new JPanel();
	panel3.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
	panel2.add(panel3, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
	theInfoAndSomeTextPane = new JTextPane();
	theInfoAndSomeTextPane.setText("Î©, version: 2.1.0; build: 23-07-01_22:27:02 mango.local  CWD: /Users/lars/project/omega/omega2_dev/github/Omega_IS-2/runtime Version: java 20.0.1,   javafx 20+19 Java Vendor: Homebrew; OS name: mac os x java home: /opt/homebrew/Cellar/openjdk/20.0.1/libexec/openjdk.jdk/Contents/Home");
	panel3.add(theInfoAndSomeTextPane, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(150, 50), null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
	return contentPane;
    }

}
